##########################################################################################
### Configurar user name globalmente.

git config --global user.name "Alexandre Visnardi"

##########################################################################################
### Configurar user mail globalmente.

git config --global user.mail "avisnardi@gmail.com"

##########################################################################################
### Altetar nome da branch principal.

git config --global init.defaultBranch main

##########################################################################################
### Altetar editor padrão de mensagens

git config --global core.editor "code --wait"

##########################################################################################
### Consultar configurações.

git config --list

##########################################################################################
### Criar repositorio na pasta atual.

git init

##########################################################################################
### Remover arquivos do git (to unstage)

git rm --cached <file>

##########################################################################################
### Remover arquivos do git (to unstage) se já tiver algum commit.

git restore --staged <file>

##########################################################################################
### Volta versão do arquivo para versão do último commit. (Perde alterações do arquivo não comitadas)

git checkout <file.name>


##########################################################################################
### Comitar arquivos

git commit -m "<Mensagem>."

##########################################################################################
### Alterar mensagem do commit realizados - Cuidado pq mata o commit anterior.

git commit --amend -m "Nova mensagem."

### Para adicionar arquivos que foram esquecidos no mesmo commit.
git commit --amend --no-edit

##########################################################################################
### Verificar alterações de arquivos modificados e não adionados. 

git diff

##########################################################################################
### Restaurar todos os arquivos não commitados

git reset --hard



##########################################################################################
### Verificar alterações de arquivos modificados e adionados mas não comitados.

git diff --cached
ou
git diff --staged


##########################################################################################
### Listar commits realizados

git log

### Listagem resumida
git log --oneline

### Quantidade de comnits
git log -5 

### Mostrar alterações
git log -p
ou 
git log --patch 

### Mostrar arquivos alterados
git log -stat 

### Mostrar quantidade de arquivos alterados
git log -shortstat 


##########################################################################################
### Navegar para versão do commit (voltar no tempo)

git checkout 3ikj3k

##########################################################################################
### Volta versão do arquivo para versão do último commit. (Perde alterações do arquivo não comitadas)

git checkout <file.name>

##########################################################################################
### Remover arquivos não rastreados

git clean -f

##########################################################################################
### Parar rastreamento de arquivo

git update-index --skip-worktree <file.name>

##########################################################################################
### Voltar rastreamento de arquivo,

git update-index --no-skip-worktree <file.name>

##########################################################################################
### Consultar vinculos com repositórios remotos

git remote -v

##########################################################################################
### Associar repositório local com repositorio remoto. (Origin é somente um alias)

git remote add origin <url.do.repositorio.remoto>

##########################################################################################
### Alterar url para qual um alias aponta. (Origin é somente um alias)

git remote set-url origin <nova.url.do.repositorio.remoto>

##########################################################################################
### Enviar artefatos comitados para repositorio remoto.

git push

##########################################################################################
### Puxar artefatos comitados do repositorio remoto para repositorio local.

git pull


##########################################################################################
### Listar branches

git branch
ou
git branch --list

##########################################################################################
### Criar uma branch (a partir da branch atual)

git branch <nome.da.branch>

##########################################################################################
### Para usar uma outra branch

git checkout <nome.da.branch>
ou
git switch <nome.da.branch>

### Volta para branch anteior.
git switch - 

##########################################################################################
### Para criar e já usar uma branch nova  (a partir da branch atual)

git checkout -b <nome.da.branch>
ou
git switch -c <nome.da.branch>
 
##########################################################################################
### Mudar de branch sem levar arquivos rastreados e perde os arquivos

git checkout -f <nova.branch>

##########################################################################################
### Asssociar a branch local à uma branch remota

git switch <branch.local> /* Migrar para a branch local desejada

git push --set-upstream origin <nome.da.branch.remota>
ou
git push -u <nome.da.branch.remota>

##########################################################################################
### Apagar uma branch local

git branch -d <nome.da.branch>


##########################################################################################
### Apagar uma branch remota

git push --delete origin <nome.da.branch>


##########################################################################################
### Alterar o nome da branch 

git branch -m "<novo.nome.da.branch>" /* Altera nome da branch checada

git branch -m "<nome.da.branch.a.ser.alterado>" "<novo.nome.da.branch>" /* Altera nome da branch checada

##########################################################################################
### Listar histórico de alterações de outra branch.

git log <nome.da.branch> --oneline -10

##########################################################################################
### Trazer mudanças de outra branch para a branch atual

git merge <nome.branch.origem>

##########################################################################################
### Listar branches mergeadas

git branch --merged

##########################################################################################
### Listar branches não mergeadas

git branch --no-merged

##########################################################################################
### Cancelar um merge (que deu conflito por exemplo)

git merge --abort
ou
git reset --hard


##########################################################################################
### Para resolver conflito deve alterar o arquivo conflitante manualmente (ou com algum editor auxiliar VSCode é bom) e comitar

<<<<<<<<< HEAD
ALTERAÇÃO DA BRANCH DESTINO
=========
ALTERAÇÃO DA BRANCH ORIGGEM
>>>>>>>>> <BRANCH.ORIGEM>


##########################################################################################
### Listar tags

git tag

git tag -l

git tag --list

git tag -n /* Lista mensagens das tags.


##########################################################################################
### Criar tag

git tag <nome.da.tag>

##########################################################################################
### Criar tag anotada

git tag -a -m "<mensagem.da.tag>" <nome.da.tag>

##########################################################################################
### Criar tag em commit antigo

git tag <nome.da.tag> <código.do.commit>
ou 
git tag -a -m "<mensagem.da.tag>" <nome.da.tag> <nome.do.commit>

##########################################################################################
### Enviar tag para repositorio remoto

git push origin <nome.da.tag>

git push origin --tags /* Envia todas as tags.

##########################################################################################
### Ir para situação da tag

git checkout <nome.da.tag>

##########################################################################################
### Comparar tags ou commits

git diff <nome.da.tag.01> <nome.da.tag.02>

##########################################################################################
### Remover tag local

git tag -d <nome.da.tag>

##########################################################################################
### Remover tag remota 

git push --delete origin <nome.da.tag>

##########################################################################################
### Guardar mudanças não comitadas para navergar entre branches e commitar depois

git stash

##########################################################################################
### Listar mudanças guardadas no stash

git stash list
 
##########################################################################################
### Voltar as mudanças guardadas no stash

git stash apply

git stash apply stash@{1} /* Volta situação de um stash especifico.

##########################################################################################
### Apagar stash e apagá-lo

git drop /* Apaga o primeiro.

git drop stash@{1}

##########################################################################################
### Criar branch a partir de um stash

git stash branch <nome.da.branch>

##########################################################################################
### Reverter alterações de um commit (mas mantem histórico)

git revert <hash.do.commit>

git revert HEAD

##########################################################################################
### Reverter a reversão das alterações de um commit

git revert <hash.do.commit> --no-edit

git revert HEAD --no-edit


##########################################################################################
### Apagar commit de vez

git reset --hard HEAD~<numero.de.commits.a.serem.apagados>

git reset --hard HEAD~5 /* Apaga os 5 últimos comits.

##########################################################################################
### Apagar commit mas manter alterações rastreadas

git reset --mixed HEAD~<numero.de.commits.a.serem.apagados>

##########################################################################################
### Apagar commit mas manter alterações como added

git reset --soft HEAD~<numero.de.commits.a.serem.apagados>

##########################################################################################
### Adicionar e commitar alterações em um mesmo comando.

git commit -a -m "<mensagem.do.commit>"

##########################################################################################
### Forçar subida de alterações para o repositorio remoto (mesmo apagando commits existente)

git push --force

git push --force-with-lease /* Sobe alterações somente se mudanças não forem perdidas.

##########################################################################################
### Trazer commits posteriores à criação da branch para a branch

git rebase main /* Estando na branch puxa alteações da branch main

##########################################################################################
### Abortar rebase com conflito

git rebase --abort

##########################################################################################
### Executar rebase após resolução do conflito

git rebase --continue

##########################################################################################
### Buscar mudanças no servidor fazendo um rebasa (sem commit de merge)

git pull --rebase



